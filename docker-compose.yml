version: "3.8"

services:
  user_service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    container_name: user_service
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./user_service/app:/app/app
      - ./user_service/scripts:/app/scripts
      - ./user_service/alembic:/app/alembic
      - ./user_service/alembic.ini:/app/alembic.ini
    depends_on:
      - elasticsearch
      - kafka
      - redis
      - postgres_user
    networks:
      - backend

  car_service:
    build:
      context: ./car_service
      dockerfile: Dockerfile
    container_name: car_service
    env_file:
      - .env
    ports:
      - "8001:8001"
    volumes:
      - ./car_service/app:/app/app
      - ./car_service/scripts:/app/scripts
      - ./car_service/alembic:/app/alembic
      - ./car_service/alembic.ini:/app/alembic.ini
    depends_on:
      - elasticsearch
      - kafka
      - redis
      - postgres_car
    networks:
      - backend

  booking_service:
    build:
      context: ./booking_service
      dockerfile: Dockerfile
    container_name: booking_service
    env_file:
      - .env
    ports:
      - "8002:8002"
    volumes:
      - ./car_service/app:/app/app
      - ./car_service/scripts:/app/scripts
      - ./car_service/alembic:/app/alembic
      - ./car_service/alembic.ini:/app/alembic.ini
    depends_on:
      - elasticsearch
      - kafka
      - redis
      - postgres_booking
    networks:
      - backend

  payment_service:
    build:
      context: ./payment_service
      dockerfile: Dockerfile
    container_name: payment_service_dev
    env_file:
      - .env
    environment:
      - BACKEND_URL=http://localhost:8003
    ports:
      - "8003:8003"
    volumes:
      - ./payment_service/app:/app/app
      - ./payment_service/scripts:/app/scripts
      - ./payment_service/alembic:/app/alembic
      - ./payment_service/alembic.ini:/app/alembic.ini
    depends_on:
      - elasticsearch
      - kafka
      - redis
      - postgres_payment
    networks:
      - backend

  stripe-listener:
    image: stripe/stripe-cli:latest
    command: listen --forward-to payment_service:8003/webhooks/stripe/webhook/
    environment:
      - STRIPE_API_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_DEVICE_NAME=stripe-listener
    depends_on:
      - payment_service
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: user_service_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend
    volumes:
      - kafka_data:/var/lib/kafka/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - backend
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend

  log_service:
    build:
      context: ./log_service
      dockerfile: Dockerfile
    container_name: log_service
    env_file:
      - .env
    depends_on:
      - kafka
      - elasticsearch
    networks:
      - backend

  notification_service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    container_name: notification_service
    env_file:
      - .env
    depends_on:
      - kafka
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./.monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - backend
    depends_on:
      - prometheus

  postgres_user:
    image: postgres:15
    container_name: postgres_user
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user_db
    volumes:
      - pgdata_user:/var/lib/postgresql/data
    networks:
      - backend

  postgres_car:
    image: postgres:15
    container_name: postgres_car
    restart: always
    environment:
      POSTGRES_USER: car
      POSTGRES_PASSWORD: password
      POSTGRES_DB: car_db
    volumes:
      - pgdata_car:/var/lib/postgresql/data
    networks:
      - backend

  postgres_booking:
    image: postgres:15
    container_name: postgres_booking
    restart: always
    environment:
      POSTGRES_USER: booking
      POSTGRES_PASSWORD: password
      POSTGRES_DB: booking_db
    volumes:
      - pgdata_booking:/var/lib/postgresql/data
    networks:
      - backend

  postgres_payment:
    image: postgres:15
    container_name: postgres_payment
    restart: always
    environment:
      POSTGRES_USER: payment
      POSTGRES_PASSWORD: password
      POSTGRES_DB: payment_db
    volumes:
      - pgdata_payment:/var/lib/postgresql/data
    networks:
      - backend

volumes:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_log:
  es_data:
  prometheus_data:
  grafana_data:
  pgdata_user:
  pgdata_car:
  pgdata_booking:
  pgdata_payment:

networks:
  backend:
    driver: bridge
